import { useEffect, useState, lazy, Suspense } from "react";
import { AnimatePresence, motion } from "framer-motion";
import { useContractForm } from "@/hooks/useContractForm";
// 1. Carga inmediata para el primer paso
import { StepPersonal } from "@/components/StepPersonal";

// ðŸš€ Lazy Loading para Pasos 2 a 6
const StepCompany = lazy(() =>Â 
Â  import('@/components/StepCompany').then(module => ({ default: module.StepCompany }))
);
const StepContract = lazy(() =>Â 
Â  import('@/components/StepContract').then(module => ({ default: module.StepContract }))
);
const StepTerms = lazy(() =>Â 
Â  import('@/components/StepTerms').then(module => ({ default: module.StepTerms }))
);
const StepReview = lazy(() =>Â 
Â  import('@/components/StepReview').then(module => ({ default: module.StepReview }))
);
const StepSuccess = lazy(() =>Â 
Â  import('@/components/StepSuccess').then(module => ({ default: module.StepSuccess }))
);

const LoadingFallback = () => <div style={{padding: '20px', textAlign: 'center'}}>Cargando paso...</div>;

import type { FormStep, ContractSubmissionResponse } from "@/types";
import {
Â  generateFormToken,
Â  storeFormToken,
Â  // ðŸ›‘ Eliminamos las funciones de seguridad no utilizadas en el frontend:
Â  // validateFormToken,
Â  // checkRateLimit,
Â  // generateHash,
Â  // createSecureTimestamp,
} from "@/utils/security";
// ðŸ›‘ Eliminamos la importaciÃ³n de Zod, ya que la validaciÃ³n estricta la hace la FunciÃ³n:
// import { fullContractFormSchema } from "@/types";

/* ==================== ConfiguraciÃ³n ==================== */
// ðŸ›‘ Eliminamos ENCRYPTION_KEY y la vieja N8N_ENDPOINT.
const API_ENDPOINT = "/api/contract"; // âœ… SoluciÃ³n al error TS2304

const STEP_LABELS: Record<FormStep, string> = {
Â  personal: "InformaciÃ³n Personal",
Â  company: "InformaciÃ³n de Empresa",
Â  contract: "Detalles del Contrato",
Â  terms: "TÃ©rminos y Condiciones",
Â  review: "RevisiÃ³n Final",
Â  success: "ConfirmaciÃ³n",
};

const variants = {
Â  in: { opacity: 0, x: 20, scale: 0.98 },
Â  live: { opacity: 1, x: 0, scale: 1 },
Â  out: { opacity: 0, x: -20, scale: 0.98 },
};

/* ==================== Componente Principal ==================== */
export default function App() {
Â  const {
Â  Â  formState,
Â  Â  updateStepData,
Â  Â  validateCurrentStep,
Â  Â  goToNextStep,
Â  Â  goToPreviousStep,
Â  Â  goToStep,
Â  Â  canProceed,
Â  Â  setSubmitting,
Â  Â  setSubmitError,
Â  Â  setSuccess,
Â  } = useContractForm();

Â  const [formToken, setFormToken] = useState<string>("");
Â  const [contractId, setContractId] = useState<string | undefined>();

Â  // Generar token CSRF al montar
Â  useEffect(() => {
Â  Â  const token = generateFormToken();
Â  Â  setFormToken(token);
Â  Â  storeFormToken(token);
Â  }, []);

Â  // Progreso visual
Â  const stepOrder: FormStep[] = ["personal", "company", "contract", "terms", "review"];
Â  const currentStepIndex = stepOrder.indexOf(formState.currentStep);
Â  const progress = ((currentStepIndex + 1) / stepOrder.length) * 100;

Â  // Nuevo y Simplificado handleSubmit en App.tsx
Â  const handleSubmit = async () => {
Â  Â  Â  // La validaciÃ³n Zod y Rate Limiting se hacen en la Cloudflare Function
Â Â 
Â  Â  Â  setSubmitting(true);
Â  Â  Â  setSubmitError(null);
Â Â 
Â  Â  Â  try {
Â  Â  Â  Â  Â  // El payload es la data del formulario (sin encriptaciÃ³n)
Â  Â  Â  Â  Â  const payload = {
Â  Â  Â  Â  Â  Â  Â  ...formState.data,
Â  Â  Â  Â  Â  Â  Â  _meta: { token: formToken, userAgent: navigator.userAgent, source: "contract-form-v1" },
Â  Â  Â  Â  Â  };
Â Â 
Â  Â  Â  Â  Â  // El fetch va al endpoint local de la Cloudflare Function
Â  Â  Â  Â  Â  const response = await fetch(API_ENDPOINT, {
Â  Â  Â  Â  Â  Â  Â  method: "POST",
Â  Â  Â  Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  Â  Â  Â  Â  "Content-Type": "application/json",
Â  Â  Â  Â  Â  Â  Â  Â  Â  "X-CSRF-Token": formToken,
Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  Â  body: JSON.stringify(payload),
Â  Â  Â  Â  Â  });
Â Â 
Â  Â  Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  Â  Â  Â  // La funciÃ³n de Cloudflare devuelve un JSON de error si algo falla
Â  Â  Â  Â  Â  Â  Â  const errorData: any = await response.json();Â 
Â  Â  Â  Â  Â  Â  Â  throw new Error(errorData.error || errorData.message || "Error al enviar el formulario");
Â  Â  Â  Â  Â  }
Â Â 
Â  Â  Â  Â  Â  const result: ContractSubmissionResponse = await response.json();
Â Â 
Â  Â  Â  Â  Â  if (result.ok) {
Â  Â  Â  Â  Â  Â  Â  setContractId(result.contractId); // Obtiene el ID del contrato generado por la FunciÃ³n
Â  Â  Â  Â  Â  Â  Â  setSuccess();
Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  throw new Error(result.error || "Error desconocido");
Â  Â  Â  Â  Â  }
Â  Â  Â  } catch (error: any) {
Â  Â  Â  Â  Â  setSubmitError(`NetworkError when attempting to fetch resource: ${error.message}`);
Â  Â  Â  } finally {
Â  Â  Â  Â  Â  setSubmitting(false);
Â  Â  Â  }
Â  };

Â  // Renderizar paso actual
Â  const renderCurrentStep = () => {
Â  Â  const { currentStep, data, errors } = formState;
// ... (resto del switch)

// ... (resto del componente App)
